{"version":3,"file":"popup.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yCAAyC;AAC9F;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,oDAAoD,mCAAmC;AACvF;AACA,kDAAkD,0BAA0B;AAC5E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;;;;;;;;UElDD;UACA;UACA;UACA;UACA","sources":["webpack://extension/./src/popup.ts","webpack://extension/webpack/before-startup","webpack://extension/webpack/startup","webpack://extension/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass PopupManager {\n    constructor() {\n        this.isConnected = false;\n        this.statusElement = document.getElementById('status');\n        this.buttonElement = document.getElementById('openTerminal'); // Cast a HTMLButtonElement\n        this.init();\n    }\n    init() {\n        this.checkConnectionStatus();\n        this.setupListeners();\n    }\n    checkConnectionStatus() {\n        fetch('http://localhost:8000')\n            .then(() => this.updateStatus(true))\n            .catch(() => this.updateStatus(false));\n    }\n    updateStatus(connected) {\n        this.isConnected = connected;\n        if (this.statusElement) {\n            this.statusElement.textContent = connected ?\n                'Connected to Terminal Fusion Server' :\n                'Server disconnected';\n            this.statusElement.className = `status ${connected ? 'connected' : 'disconnected'}`;\n        }\n        if (this.buttonElement) {\n            this.buttonElement.disabled = !connected; // Ahora funciona porque buttonElement es HTMLButtonElement\n        }\n    }\n    setupListeners() {\n        var _a;\n        (_a = this.buttonElement) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n            const [tab] = yield chrome.tabs.query({ active: true, currentWindow: true });\n            if (tab.id) {\n                chrome.tabs.sendMessage(tab.id, { action: 'toggleTerminal' });\n            }\n        }));\n    }\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    new PopupManager();\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/popup.ts\"]();\n",""],"names":[],"sourceRoot":""}