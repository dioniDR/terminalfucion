{"version":3,"file":"background.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA,CAAC","sources":["webpack://extension/./src/background.ts"],"sourcesContent":["\"use strict\";\nclass WebSocketManager {\n    constructor() {\n        this.socket = null;\n        this.isConnected = false;\n        this.connect();\n    }\n    connect() {\n        try {\n            this.socket = new WebSocket('ws://localhost:8000/ws');\n            this.socket.onopen = this.handleOpen.bind(this);\n            this.socket.onclose = this.handleClose.bind(this);\n            this.socket.onmessage = this.handleMessage.bind(this);\n            this.socket.onerror = this.handleError.bind(this);\n        }\n        catch (error) {\n            console.error('Error creating WebSocket:', error);\n            this.updateStatus(false);\n        }\n    }\n    handleOpen() {\n        console.log('Connected to Terminal Fusion server');\n        this.updateStatus(true);\n    }\n    handleClose() {\n        console.log('Disconnected from server');\n        this.updateStatus(false);\n        setTimeout(() => this.connect(), 5000);\n    }\n    handleMessage(event) {\n        console.log('Received:', event.data);\n    }\n    handleError(error) {\n        console.error('WebSocket error:', error);\n        this.updateStatus(false);\n    }\n    updateStatus(connected) {\n        this.isConnected = connected;\n        chrome.runtime.sendMessage({\n            type: 'connectionStatus',\n            isConnected: connected\n        }).catch(error => {\n            console.error('Error sending message:', error);\n        });\n    }\n    getStatus() {\n        return this.isConnected;\n    }\n}\nconst wsManager = new WebSocketManager();\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'getConnectionStatus') {\n        sendResponse({ isConnected: wsManager.getStatus() });\n    }\n    return true;\n});\n"],"names":[],"sourceRoot":""}